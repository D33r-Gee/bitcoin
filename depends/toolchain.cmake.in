# Copyright (c) 2023-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit/.

if("@host_system_name@" STREQUAL "Android")
  # For Android, we use the toolchain file provided by the Android SDK.
  # See: https://developer.android.com/ndk/guides/cmake
  set(ANDROID_ABI @android_abi@)
  set(ANDROID_PLATFORM android-@host_system_version@)
  include(@android_ndk@/build/cmake/android.toolchain.cmake)

  # --------------------------------------------------------------------
  #  Customisation: integrate a pre-built Qt for Android SDK seamlessly
  # --------------------------------------------------------------------
  # The path *may* come from the depends build (recorded via the
  # `QT_ANDROID_SDK` / `QT_HOST_QT` variables that were supplied when
  # invoking `make -C depends â€¦`).  These get substituted into this
  # template via the Makefile.  If they are empty we fall back to the
  # runtime environment variables so manual overrides are still possible.
  if(NOT "@external_qt_android_sdk@" STREQUAL "")
    set(_QT_ANDROID_SDK "@external_qt_android_sdk@")
  elseif(DEFINED ENV{QT_ANDROID_SDK})
    set(_QT_ANDROID_SDK "$ENV{QT_ANDROID_SDK}")
  endif()

  if(_QT_ANDROID_SDK)
    # Resolve host-side Qt (for androiddeployqt) in the same manner.
    if(NOT "@external_qt_host_qt@" STREQUAL "")
      set(_QT_HOST_PATH "@external_qt_host_qt@")
    elseif(DEFINED ENV{QT_HOST_PATH})
      set(_QT_HOST_PATH "$ENV{QT_HOST_PATH}")
    endif()

    # Provide a sane Android-NDK root for Qt's toolchain to chain-load,
    # silencing the bogus Windows path warning.
    if(NOT DEFINED ANDROID_NDK_ROOT)
      if(NOT "@android_ndk@" STREQUAL "")
        set(ANDROID_NDK_ROOT "@android_ndk@")
      elseif(DEFINED ENV{ANDROID_NDK})
        set(ANDROID_NDK_ROOT "$ENV{ANDROID_NDK}")
      endif()
    endif()

    # Provide QT_HOST_PATH up-front so Qt's toolchain can pick it up while loading.
    if(_QT_HOST_PATH)
      set(QT_HOST_PATH "${_QT_HOST_PATH}" CACHE PATH "Host Qt installation used by androiddeployqt" FORCE)
    endif()

    # Locate the Qt chain-load toolchain and include it.
    set(_QT_TOOLCHAIN "${_QT_ANDROID_SDK}/Qt6/qt.toolchain.cmake")
    if(EXISTS "${_QT_TOOLCHAIN}")
      message(STATUS "Qt Android SDK detected at '${_QT_ANDROID_SDK}'. Using Qt toolchain file '${_QT_TOOLCHAIN}'.")
      include("${_QT_TOOLCHAIN}")
    else()
      message(WARNING "Qt Android SDK path '${_QT_ANDROID_SDK}' was provided but '${_QT_TOOLCHAIN}' does not exist. Skipping Qt integration.")
    endif()
    unset(_QT_TOOLCHAIN)

    # Default to Ninja generator unless the user explicitly chose one.
    if(NOT DEFINED CMAKE_GENERATOR)
      set(CMAKE_GENERATOR "Ninja" CACHE INTERNAL "Default generator for Qt Android builds")
    endif()

    # Ensure CMake can locate Qt and our depends prefix first.
    list(PREPEND CMAKE_PREFIX_PATH "${_QT_ANDROID_SDK}")
    list(APPEND CMAKE_FIND_ROOT_PATH "${_QT_ANDROID_SDK}")

    # Disable unwanted Qt ZSTD resource compression to save APK size.
    set(QT_RESOURCE_FEATURE_ZSTD OFF CACHE BOOL "Disable Zstd compression for Qt rcc resources" FORCE)

    # After inclusion, extend search paths with host Qt (needed for host tools like lupdate).
    if(_QT_HOST_PATH)
      list(APPEND CMAKE_PREFIX_PATH "${_QT_HOST_PATH}")
      list(APPEND CMAKE_FIND_ROOT_PATH "${_QT_HOST_PATH}")
    endif()

    # Configure Bitcoin Core build options suited for Android GUI.
    set(BUILD_GUI ON  CACHE BOOL "Build GUI for Android"   FORCE)
    foreach(_opt BUILD_CLI BUILD_DAEMON BUILD_TX BUILD_UTIL BUILD_TESTS BUILD_BENCH)
      set(${_opt} OFF CACHE BOOL "Disabled for Android GUI build" FORCE)
    endforeach()
    set(WITH_DBUS OFF CACHE BOOL "Disable DBus for Android" FORCE)
    if(NOT DEFINED CMAKE_BUILD_TYPE)
      set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Default build type" FORCE)
    endif()

    # Make the path to the depends prefix easily accessible and searchable.
    set(_DEPENDS_PREFIX "${CMAKE_CURRENT_LIST_DIR}")
    list(APPEND CMAKE_PREFIX_PATH "${_DEPENDS_PREFIX}")
    list(APPEND CMAKE_FIND_ROOT_PATH "${_DEPENDS_PREFIX}")

    # Package specific hints for static libraries produced by depends.
    set(QRencode_INCLUDE_DIR "${_DEPENDS_PREFIX}/include" CACHE PATH "Path to qrencode headers" FORCE)
    set(QRencode_LIBRARY_RELEASE "${_DEPENDS_PREFIX}/lib/libqrencode.a" CACHE FILEPATH "Path to qrencode static library" FORCE)
    # Provide generic alias too, required by FindQRencode.cmake when only a
    # single configuration exists.
    set(QRencode_LIBRARY "${QRencode_LIBRARY_RELEASE}" CACHE FILEPATH "Alias for qrencode static library" FORCE)

    set(ZeroMQ_DIR          "${_DEPENDS_PREFIX}/lib/cmake/ZeroMQ" CACHE PATH "Path to ZeroMQ CMake config" FORCE)
    set(SQLite3_INCLUDE_DIR "${_DEPENDS_PREFIX}/include"           CACHE PATH "Path to SQLite3 headers" FORCE)
    set(SQLite3_LIBRARY     "${_DEPENDS_PREFIX}/lib/libsqlite3.a"  CACHE FILEPATH "Path to SQLite3 static library" FORCE)

    # Provide explicit hint variables so CMake's find_package(Qt) logic succeeds.
    set(Qt6_ROOT "${_QT_ANDROID_SDK}" CACHE PATH "Root of external Qt 6 installation" FORCE)
    set(Qt6_DIR  "${_QT_ANDROID_SDK}/lib/cmake/Qt6" CACHE PATH "Path to Qt6Config.cmake" FORCE)

    unset(_DEPENDS_PREFIX)
  endif()
  # --------------------------------------------------------------------
  #  End Qt for Android integration
  # --------------------------------------------------------------------

  # Qt's Java sources for Android Application Package (APK).
  cmake_path(SET ANDROID_APK_SRC "${CMAKE_CURRENT_LIST_DIR}/src/android/java")
  # The libc++_shared.so shared library, provided by the Android SDK,
  # is required to build an Android Application Package (APK).
  cmake_path(SET ANDROID_SHARED_CXX_LIB NORMALIZE "@android_toolchain_bin_dir@/../sysroot/usr/lib/@android_libcxx_shared_dir@/libc++_shared.so")
  # Qt recommends using the same Gradle version that it comes with.
  # Therefore, we use the Gradle wrapper provided by Qt to build
  # an Android Application Package (APK).
  # See:
  # - https://doc.qt.io/qt-6/deployment-android.html
  # - https://doc.qt.io/qt-6/qtcore-attribution-android-gradle-wrapper.html
  cmake_path(SET GRADLEW_EXECUTABLE "${CMAKE_CURRENT_LIST_DIR}/src/3rdparty/gradle/gradlew")
else()
  # If CMAKE_SYSTEM_NAME is set within a toolchain file, CMake will also
  # set CMAKE_CROSSCOMPILING to TRUE, even if CMAKE_SYSTEM_NAME matches
  # CMAKE_HOST_SYSTEM_NAME. To avoid potential misconfiguration of CMake,
  # it is best not to touch CMAKE_SYSTEM_NAME unless cross-compiling is
  # intended.
  if(@depends_crosscompiling@)
    set(CMAKE_SYSTEM_NAME @host_system_name@)
    set(CMAKE_SYSTEM_VERSION @host_system_version@)
    set(CMAKE_SYSTEM_PROCESSOR @host_arch@)

    set(CMAKE_C_COMPILER_TARGET @host@)
    set(CMAKE_CXX_COMPILER_TARGET @host@)
    set(CMAKE_OBJCXX_COMPILER_TARGET @host@)
  endif()

  if(NOT DEFINED CMAKE_C_COMPILER)
    set(CMAKE_C_COMPILER @CC@)
  endif()

  if(NOT DEFINED CMAKE_CXX_COMPILER)
    set(CMAKE_CXX_COMPILER @CXX@)
    set(CMAKE_OBJCXX_COMPILER ${CMAKE_CXX_COMPILER})
  endif()

  set(CMAKE_AR "@AR@")
  set(CMAKE_RANLIB "@RANLIB@")
  set(CMAKE_STRIP "@STRIP@")
  set(CMAKE_OBJCOPY "@OBJCOPY@")
  set(CMAKE_OBJDUMP "@OBJDUMP@")
endif()

if(NOT DEFINED CMAKE_C_FLAGS_INIT)
  set(CMAKE_C_FLAGS_INIT "@CFLAGS@")
endif()
if(NOT DEFINED CMAKE_C_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "@CFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_C_FLAGS_DEBUG_INIT)
  set(CMAKE_C_FLAGS_DEBUG_INIT "@CFLAGS_DEBUG@")
endif()

if(NOT DEFINED CMAKE_CXX_FLAGS_INIT)
  set(CMAKE_CXX_FLAGS_INIT "@CXXFLAGS@")
  set(CMAKE_OBJCXX_FLAGS_INIT "@CXXFLAGS@")
endif()
if(NOT DEFINED CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "@CXXFLAGS_RELEASE@")
  set(CMAKE_OBJCXX_FLAGS_RELWITHDEBINFO_INIT "@CXXFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_CXX_FLAGS_DEBUG_INIT)
  set(CMAKE_CXX_FLAGS_DEBUG_INIT "@CXXFLAGS_DEBUG@")
  set(CMAKE_OBJCXX_FLAGS_DEBUG_INIT "@CXXFLAGS_DEBUG@")
endif()

# The DEPENDS_COMPILE_DEFINITIONS* variables are to be treated as lists.
set(DEPENDS_COMPILE_DEFINITIONS @CPPFLAGS@)
set(DEPENDS_COMPILE_DEFINITIONS_RELWITHDEBINFO @CPPFLAGS_RELEASE@)
set(DEPENDS_COMPILE_DEFINITIONS_DEBUG @CPPFLAGS_DEBUG@)

if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_INIT "@LDFLAGS@")
endif()
if(NOT DEFINED CMAKE_SHARED_LINKER_FLAGS_INIT)
  set(CMAKE_SHARED_LINKER_FLAGS_INIT "@LDFLAGS@")
endif()
if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT "@LDFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO_INIT "@LDFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT "@LDFLAGS_DEBUG@")
endif()
if(NOT DEFINED CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT)
  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT "@LDFLAGS_DEBUG@")
endif()

# Using our own built dependencies should not be
# affected by a potentially random environment.
set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH OFF)

set(CMAKE_FIND_ROOT_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(QT_TRANSLATIONS_DIR "${CMAKE_CURRENT_LIST_DIR}/translations")

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND NOT CMAKE_HOST_APPLE)
  # The find_package(Qt ...) function internally uses find_library()
  # calls for all dependencies to ensure their availability.
  # In turn, the find_library() inspects the well-known locations
  # on the file system; therefore, a hint is required.
  set(CMAKE_FRAMEWORK_PATH "@OSX_SDK@/System/Library/Frameworks")
endif()


if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  # Customize pkg-config behavior for finding dependencies
  # of the xcb QPA platform plugin:
  # 1. Restrict search paths to the depends.
  # 2. Make output suitable for static linking.
  cmake_path(APPEND CMAKE_CURRENT_LIST_DIR "lib" "pkgconfig" OUTPUT_VARIABLE pkg_config_path)
  set(ENV{PKG_CONFIG_PATH} ${pkg_config_path})
  set(ENV{PKG_CONFIG_LIBDIR} ${pkg_config_path})
  unset(pkg_config_path)
  set(PKG_CONFIG_ARGN --static)
endif()


# Set configuration options for the main build system.
set(qt_packages @qt_packages@)
if("${qt_packages}" STREQUAL "")
  set(BUILD_GUI OFF CACHE BOOL "")
else()
  set(BUILD_GUI ON CACHE BOOL "")
  set(Qt6_ROOT "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "")
endif()

set(qrencode_packages @qrencode_packages@)
if("${qrencode_packages}" STREQUAL "")
  set(WITH_QRENCODE OFF CACHE BOOL "")
else()
  set(WITH_QRENCODE ON CACHE BOOL "")
endif()

set(zmq_packages @zmq_packages@)
if("${zmq_packages}" STREQUAL "")
  set(WITH_ZMQ OFF CACHE BOOL "")
else()
  set(WITH_ZMQ ON CACHE BOOL "")
endif()

set(wallet_packages @wallet_packages@)
if("${wallet_packages}" STREQUAL "")
  set(ENABLE_WALLET OFF CACHE BOOL "")
else()
  set(ENABLE_WALLET ON CACHE BOOL "")
endif()

set(bdb_packages @bdb_packages@)
if("${wallet_packages}" STREQUAL "" OR "${bdb_packages}" STREQUAL "")
  set(WITH_BDB OFF CACHE BOOL "")
else()
  set(WITH_BDB ON CACHE BOOL "")
endif()

set(usdt_packages @usdt_packages@)
if("${usdt_packages}" STREQUAL "")
  set(WITH_USDT OFF CACHE BOOL "")
else()
  set(WITH_USDT ON CACHE BOOL "")
endif()

if("@multiprocess@" STREQUAL "1")
  set(ENABLE_IPC ON CACHE BOOL "")
  set(MPGEN_EXECUTABLE "${CMAKE_CURRENT_LIST_DIR}/native/bin/mpgen" CACHE FILEPATH "")
  set(CAPNP_EXECUTABLE "${CMAKE_CURRENT_LIST_DIR}/native/bin/capnp" CACHE FILEPATH "")
  set(CAPNPC_CXX_EXECUTABLE "${CMAKE_CURRENT_LIST_DIR}/native/bin/capnpc-c++" CACHE FILEPATH "")
else()
  set(ENABLE_IPC OFF CACHE BOOL "")
endif()
